{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Read simple vector": {
    "prefix": "xreadSv",
    "body": [
      "for (auto &i: va) cin >> i;"
    ],
    "description": "Read simple vector"
  },
  "Read vector of pairs": {
    "prefix": "xrvp",
    "body": [
      "for (auto &[i, j]: va) cin >> i >> j;"
    ],
    "description": "Read vector of pairs"
  },
  "Print simple vector": {
    "prefix": "xprintSv",
    "body": [
      "for (auto &i : va) cout << i << \" \";"
    ],
    "description": "Print simple vector"
  },
  "Print vector of pairs": {
    "prefix": "xpvp",
    "body": [
      "for (auto &[i, j] : va) cout << i << \" \" << j << \" \";"
    ],
    "description": "Print vector of pairs"
  },
  "Full Cpp Template": {
    "prefix": "xfullyFledgedTemplate",
    "body": [
      "#include <bits/stdc++.h>",
      "",
      "using namespace std;",
      "",
      "#pragma region",
      "// clang-format off",
      "#define fastIO ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);",
      "#define int long long",
      "#define newLine cout<<\"\\n\";",
      "#define nlc '\\n'",
      "#define fullLength(v) v.begin(), v.end()",
      "#define rfullLength(v) v.rbegin(), v.rend()",
      "#define fileIO freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);",
      "#define readOnly freopen(\"input.txt\", \"r\", stdin);",
      "",
      "const int maxx = 1e18 + 7;",
      "const int cmod = 1e9 + 7;",
      "const string yes = \"Yes\\n\", no = \"No\\n\";",
      "",
      "int lcm(int a, int b) {",
      "  return (a * b) / __gcd(a, b);",
      "}",
      "",
      "bool isPrime(int num) {",
      "  if (num < 2)",
      "    return false;",
      "  for (int x = 2; x * x <= num; x++) {",
      "    if (num % x == 0)",
      "      return false;",
      "    }",
      "  return true;",
      "}",
      "",
      "namespace ___debug {",
      "    template <typename T> struct is_outputtable { template <typename C> static constexpr decltype(declval<ostream &>() << declval<const C &>(), bool()) test(int64_t) { return true; } template <typename C> static constexpr bool test(...) { return false; } static constexpr bool value = test<T>(int64_t()); };",
      "    template <class T, typename V = decltype(declval<const T &>().begin()), typename S = typename enable_if<!is_outputtable<T>::value, bool>::type> void pr(const T &x);",
      "",
      "    template <class T, typename V = decltype(declval<ostream &>() << declval<const T &>())> void pr(const T &x) { cout << x; }",
      "    template <class T1, class T2> void pr(const pair<T1, T2> &x);",
      "    template <class Arg, class... Args> void pr(const Arg &first, const Args &...rest) { pr(first); pr(rest...); }",
      "",
      "    template <class T, bool pretty = true> void prContain(const T &x) { if (pretty) pr(\"{\"); bool fst = 1; for (const auto &a : x) pr(!fst ? pretty ? \", \" : \" \" : \"\", a), fst = 0; if (pretty) pr(\"}\"); }",
      "",
      "    template <class T> void pc(const T &x) { prContain<T, false>(x); pr(\"\\n\"); }",
      "    template <class T1, class T2> void pr(const pair<T1, T2> &x) { pr(\"{\", x.first, \", \", x.second, \"}\"); }",
      "    template <class T, typename V, typename S> void pr(const T &x) { prContain(x); }",
      "    void ps() { pr(\"\\n\"); }",
      "    template <class Arg> void ps(const Arg &first) { pr(first); ps(); }",
      "    template <class Arg, class... Args> void ps(const Arg &first, const Args &...rest) { pr(first, \" \"); ps(rest...); }",
      "}",
      "using namespace ___debug;",
      "",
      "#define __pn(x) pr(#x, \" = \")",
      "#ifdef DEBUG_LOCALE",
      "#define deb(...) pr(\"\\033[1;31m\"), __pn((__VA_ARGS__)), ps(__VA_ARGS__), pr(\"\\033[0m\"), cout << flush",
      "#else",
      "#define deb(...)",
      "#endif",
      "",
      "auto cleanRemove = [&](vector<int> &vx, int num) {",
      "  return vx.erase(remove(fullLength(vx), num), vx.end());",
      "};",
      "",
      "// clang-format on",
      "#pragma endregion",
      "",
      "auto safeCeil = [](int a, int b) -> int {",
      "  return ((a == b and a == 1) ? 1 : (a + b - 1) / b);",
      "};",
      "",
      "struct coord {",
      "  int val, wt, ind;",
      "};",
      "",
      "void solve() {",
      "  int n;",
      "  cin >> n;",
      "  $0",
      "",
      "  vector<int> va(n), vb;",
      "  newLine",
      "}",
      "",
      "int32_t main() {",
      "  // clang-format off",
      "  fastIO",
      "  #ifdef DEBUG_LOCALE",
      "      readOnly",
      "  #elif !defined (ONLINE_JUDGE)",
      "      fileIO",
      "  #endif",
      "",
      "  int t = 1;",
      "",
      "  cin >> t;",
      "  while (t--)",
      "  solve();",
      "",
      "}",
      ""
    ],
    "description": "Full Cpp Template"
  },
  "Clean Cpp Template": {
    "prefix": "xcleanCppTemplate",
    "body": [
      "#include <bits/stdc++.h>",
      "",
      "using namespace std;",
      "",
      "#pragma region",
      "// clang-format off",
      "#define fastIO ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);",
      "#define int long long",
      "#define newLine cout<<\"\\n\";",
      "#define nlc '\\n'",
      "#define fullLength(v) v.begin(), v.end()",
      "#define rfullLength(v) v.rbegin(), v.rend()",
      "#define fileIO freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);",
      "#define readOnly freopen(\"input.txt\", \"r\", stdin);",
      "",
      "const int maxx = 1e18 + 7;",
      "const int cmod = 1e9 + 7;",
      "const string yes = \"Yes\\n\", no = \"No\\n\";",
      "",
      "int lcm(int a, int b) {",
      "  return (a * b) / __gcd(a, b);",
      "}",
      "",
      "bool isPrime(int num) {",
      "  if (num < 2)",
      "    return false;",
      "  for (int x = 2; x * x <= num; x++) {",
      "    if (num % x == 0)",
      "      return false;",
      "    }",
      "  return true;",
      "}",
      "",
      "auto cleanRemove = [](vector<int> &vx, int num) {",
      "  return vx.erase(remove(fullLength(vx), num), vx.end());",
      "};",
      "",
      "// clang-format on",
      "#pragma endregion",
      "",
      "auto safeCeil = [](int a, int b) -> int {",
      "  return ((a == b and a == 1) ? 1 : (a + b - 1) / b);",
      "};",
      "",
      "struct coord {",
      "  int val, wt, ind;",
      "};",
      "",
      "void solve() {",
      "  int n;",
      "  cin >> n;",
      "  $0",
      "",
      "  vector<int> va(n), vb;",
      "  newLine",
      "}",
      "",
      "int32_t main() {",
      "  // clang-format off",
      "  fastIO",
      "  #ifdef DEBUG_LOCALE",
      "      readOnly",
      "  #elif !defined (ONLINE_JUDGE)",
      "      fileIO",
      "  #endif",
      "",
      "  int t = 1;",
      "",
      "  cin >> t;",
      "  while (t--)",
      "  solve();",
      "",
      "}",
      ""
    ],
    "description": "Clean Cpp Template"
  },
  "Debugging fns": {
    "prefix": "xusingnamespacedebug",
    "body": [
      "namespace ___debug {",
      "    template <typename T> struct is_outputtable { template <typename C> static constexpr decltype(declval<ostream &>() << declval<const C &>(), bool()) test(int64_t) { return true; } template <typename C> static constexpr bool test(...) { return false; } static constexpr bool value = test<T>(int64_t()); };",
      "    template <class T, typename V = decltype(declval<const T &>().begin()), typename S = typename enable_if<!is_outputtable<T>::value, bool>::type> void pr(const T &x);",
      "",
      "    template <class T, typename V = decltype(declval<ostream &>() << declval<const T &>())> void pr(const T &x) { cout << x; }",
      "    template <class T1, class T2> void pr(const pair<T1, T2> &x);",
      "    template <class Arg, class... Args> void pr(const Arg &first, const Args &...rest) { pr(first); pr(rest...); }",
      "",
      "    template <class T, bool pretty = true> void prContain(const T &x) { if (pretty) pr(\"{\"); bool fst = 1; for (const auto &a : x) pr(!fst ? pretty ? \", \" : \" \" : \"\", a), fst = 0; if (pretty) pr(\"}\"); }",
      "",
      "    template <class T> void pc(const T &x) { prContain<T, false>(x); pr(\"\\n\"); }",
      "    template <class T1, class T2> void pr(const pair<T1, T2> &x) { pr(\"{\", x.first, \", \", x.second, \"}\"); }",
      "    template <class T, typename V, typename S> void pr(const T &x) { prContain(x); }",
      "    void ps() { pr(\"\\n\"); }",
      "    template <class Arg> void ps(const Arg &first) { pr(first); ps(); }",
      "    template <class Arg, class... Args> void ps(const Arg &first, const Args &...rest) { pr(first, \" \"); ps(rest...); }",
      "}",
      "using namespace ___debug;",
      "",
      "#define __pn(x) pr(#x, \" = \")",
      "#ifdef DEBUG_LOCALE",
      "#define deb(...) pr(\"\\033[1;31m\"), __pn((__VA_ARGS__)), ps(__VA_ARGS__), pr(\"\\033[0m\"), cout << flush",
      "#else",
      "#define deb(...)",
      "#endif",
      ""
    ],
    "description": "Debugging fns"
  },
  "Defines fileIO": {
    "prefix": "xfiosnip",
    "body": [
      "#define fileIO freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);"
    ],
    "description": "Defines fileIO"
  },
  "cins a 2d matrix / grid": {
    "prefix": "xrmatrix",
    "body": [
      "for (auto &row : matrix) {",
      "  for (auto &row_el : row) {",
      "    cin >> row_el;",
      "  }",
      "}"
    ],
    "description": "cins a 2d matrix / grid"
  },
  "couts a 2d matrix / grid": {
    "prefix": "xprmatrix",
    "body": [
      "for (auto &row : matrix) {",
      "  for (auto row_el : row) {",
      "    cout << row_el << \" \";",
      "  }",
      "  newLine",
      "}"
    ],
    "description": "couts a 2d matrix / grid"
  },
  "combinatorics snip": {
    "prefix": "xcombiutils",
    "body": [
      "const int Ng = 2e5 + 1;",
      "",
      "// chopra orz _/\\_",
      "int fact[Ng];",
      "int ifact[Ng];",
      "int modular_exp(int base, int exp, int mod = cmod) {",
      "  int ans = 1;",
      "  while (exp) {",
      "    if (exp & 1) ans = ans % mod * base % mod;",
      "    base = (base % mod * base % mod) % mod;",
      "    exp >>= 1LL;",
      "    ans %= mod;",
      "  }",
      "  return ans % mod;",
      "}",
      "",
      "int inv_mod(int base, int mod) { return modular_exp(base, mod - 2, mod); }",
      "",
      "void pre_compute() {",
      "  fact[0] = 1;",
      "  for (int i = 1; i < Ng; i++) {",
      "    fact[i] = (i * fact[i - 1]) % cmod;",
      "  }",
      "  ifact[Ng - 1] = inv_mod(fact[Ng - 1], cmod);",
      "  for (int i = Ng - 2; i > -1; i--) {",
      "    ifact[i] = ((i + 1) * ifact[i + 1]) % cmod;",
      "  }",
      "}",
      "",
      "int nCr(int n, int r) {",
      "  if (r > n or r < 0) return 0;",
      "  if (r == n or r == 0) return 1;",
      "  return ((fact[n] % cmod * ifact[r] % cmod) * ifact[n - r]) % cmod;",
      "}"
    ],
    "description": "combinatorics snip"
  },
  "fills up the solve fn": {
    "prefix": "xpray",
    "body": [
      "  int n;",
      "  cin >> n;",
      "  vector<int> va(n);",
      "  for (auto &i: va) cin >> i;"
    ],
    "description": "fills up the solve fn"
  },
  "string-number-utils": {
    "prefix": "xstrnum",
    "body": [
      "// `true` if first str is smaller than second.",
      "bool is_lesser_str(string first, string sec) {",
      "  int len_first = first.length(), len_sec = sec.length();",
      "  if (len_sec > len_first) return true;",
      "  if (len_sec < len_first) return false;",
      "  {",
      "    int n = len_first;",
      "    for (int i = 0; i < n; ++i) {",
      "      if (first[i] < sec[i])",
      "        return true;",
      "      else if (first[i] > sec[i])",
      "        return false;",
      "    }",
      "    return false;",
      "  }",
      "}",
      "",
      "string get_str_diff(string first, string sec) {",
      "  string rdiff;",
      "  if (is_lesser_str(first, sec)) swap(first, sec);",
      "  reverse(fullLength(first)), reverse(fullLength(sec));",
      "  int cry = 0;",
      "  int fsz = first.size(), ssz = sec.size();",
      "  for (int i = 0; i < ssz; ++i) {",
      "    int d_diff = first[i] - sec[i] - cry;",
      "    if (d_diff < 0)",
      "      d_diff += 10, cry = true;",
      "    else",
      "      cry = false;",
      "    rdiff.push_back(d_diff + '0');",
      "  }",
      "  // operate on left digits of greater num",
      "  for (int i = ssz; i < fsz; ++i) {",
      "    int left = first[i] - '0' - cry;",
      "    if (left < 0) left += 10, cry = true;",
      "    else",
      "      cry = false;",
      "    rdiff.push_back(left + '0');",
      "  }",
      "  reverse(fullLength(rdiff));",
      "  int idx = 0;",
      "  for (const char &ch: rdiff)",
      "    if (ch == '0') ++idx;",
      "    else break;",
      "  return rdiff.substr(idx, fsz - idx);",
      "}",
      ""
    ],
    "description": "string-number-utils"
  }, 
  "prints time?": {
    "prefix": "xtimeee",
    "body": [
      "epoch: $CURRENT_SECONDS_UNIX",
      "hr: $CURRENT_HOUR",
      "min: $CURRENT_MINUTE",
      "sec: $CURRENT_SECOND",
    ],
    "description": "prints time?"
  } 
}